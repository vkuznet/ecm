name: Build

on:
  push:
    tags:
      - '*.*.*'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build-CLI
      run: |
        cd cli
        mkdir ecm_{amd64,darwin,power8,arm64,windows}
        echo "AMD64 build"
        make build_amd64;   mv ecm ecm_amd64

        echo "Darwin build"
        make build_darwin;  mv ecm ecm_darwin

        echo "Power8 build"
        make build_power8;  mv ecm ecm_power8

        echo "ARM64 build"
        make build_arm64;   mv ecm ecm_arm64

        echo "Windows build"
        make build_windows; mv ecm ecm_windows

        echo "Tar all builds"
        tar cfz ../ecm_cli.tar.gz ecm_amd64 ecm_darwin ecm_power8 ecm_arm64 ecm_windows
        cd -

    - name: Build fyne
      run: |
        echo "build fyne"
        curl -ksLO https://github.com/fyne-io/fyne/archive/refs/tags/v2.2.2.tar.gz
        tar xfz v2.2.2.tar.gz
        cd fyne-2.2.2/cmd/fyne
        pwd
        ls
        go build
        ls
        cp fyne ../../../
        cd -
        pwd
        ls -al $PWD

    - name: Add credentials
      run: |
        pwd
        cd ui
        cat > credentials.env << EOF
        DROPBOX_CLIENT_ID=${{ secrets.DROPBOX_CLIENT_ID }}
        DROPBOX_CLIENT_SECRET=${{ secrets.DROPBOX_CLIENT_SECRET }}
        DROPBOX_PORT=${{ secrets.DROPBOX_PORT }}
        EOF
        sed -i -e "s,^[[:space:]]*,,g" credentials.env
        cat > rclone.conf << EOF
        [local]
        type = local
        [dropbox]
        type = dropbox
        env_auth = true
        EOF
        sed -i -e "s,^[[:space:]]*,,g" rclone.conf
        cd -

    - name: Build-UI
      run: |
        pwd
        export PATH=$PATH:$PWD
        cd ui
        mkdir ecm_{amd64,darwin,power8,arm64,windows}
        echo "AMD64 build"
        sudo apt-get -y install xorg-dev
        make build_amd64;   mv ecm ecm_amd64

        echo "Darwin build"
        CGO_ENABLED=1 GOOS=darwin go build -v -o ecm -ldflags="-w -X main.appKind=desktop"
        mv ecm ecm_darwin
        #make build_darwin;  mv ecm ecm_darwin

        echo "Power8 build"
        make build_power8;  mv ecm ecm_power8

        echo "ARM64 build"
        make build_arm64;   mv ecm ecm_arm64

        echo "Windows build"
        make build_windows; mv ecm ecm_windows

        echo "Tar all builds"
        tar cfz ../ecm_app.tar.gz ecm_amd64 ecm_darwin ecm_power8 ecm_arm64 ecm_windows

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload cli binaries
      id: upload-ecm-cli
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ecm_cli.tar.gz
        asset_name: ecm_cli.tar.gz
        asset_content_type: application/octet-stream

    - name: Upload app binaries
      id: upload-ecm-app
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ecm_app.tar.gz
        asset_name: ecm_app.tar.gz
        asset_content_type: application/octet-stream

#     - name: Get the Ref
#       id: get-ref
#       uses: ankitvgupta/ref-to-tag-action@master
#       with:
#         ref: ${{ github.ref }}
#         head_ref: ${{ github.head_ref }}

#     - name: Build image
#       run: |
#         docker build . --tag docker.pkg.github.com/vkuznet/ecm/ecm

#     - name: Login to docker github registry
#       uses: docker/login-action@v1.6.0
#       with:
#         registry: docker.pkg.github.com
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     - name: Publish image
#       uses: docker/build-push-action@v1
#       with:
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
#         registry: docker.pkg.github.com
#         repository: vkuznet/ecm/ecm
#         tag_with_ref: true

#     - name: Login to DockerHub
#       uses: docker/login-action@v1
#       with:
#         username: ${{ secrets.DOCKER_HUB_USERNAME }}
#         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
