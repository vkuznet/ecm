name: Build release

on:
  push:
    tags:
      - '*.*.*'
#   push:
#     branches: [ main ]

jobs:
  job-linux:
    name: Build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build-CLI
        run: |
          cd cli
          mkdir ecm_{amd64,darwin,power8,arm64,windows}
          echo "AMD64 build"
          make build_amd64;   mv ecm ecm_amd64

          echo "Darwin build"
          make build_darwin;  mv ecm ecm_darwin

          echo "Power8 build"
          make build_power8;  mv ecm ecm_power8

          echo "ARM64 build"
          make build_arm64;   mv ecm ecm_arm64

          echo "Windows build"
          make build_windows; mv ecm ecm_windows

          echo "Tar all builds"
          tar cfz ../ecm_cli.tar.gz ecm_amd64 ecm_darwin ecm_power8 ecm_arm64 ecm_windows
          cd -

      - name: Build fyne
        run: |
          echo "build fyne"
          curl -ksLO https://github.com/fyne-io/fyne/archive/refs/tags/v2.2.2.tar.gz
          tar xfz v2.2.2.tar.gz
          cd fyne-2.2.2/cmd/fyne
          go build
          cp fyne ../../../
          cd -

      - name: Add credentials
        run: |
          pwd
          cd ui
          cat > credentials.env << EOF
          DROPBOX_CLIENT_ID=${{ secrets.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET=${{ secrets.DROPBOX_CLIENT_SECRET }}
          DROPBOX_PORT=${{ secrets.DROPBOX_PORT }}
          EOF
          sed -i -e "s,^[[:space:]]*,,g" credentials.env
          cat > rclone.conf << EOF
          [local]
          type = local
          [dropbox]
          type = dropbox
          env_auth = true
          EOF
          sed -i -e "s,^[[:space:]]*,,g" rclone.conf
          cd -

      - name: Build-UI
        run: |
          pwd
          export PATH=$PATH:$PWD
          cd ui
          mkdir ecm_{amd64,darwin,power8,arm64,windows}
          sudo apt-get -y install xorg-dev

          #echo "Power8 build"
          #make build_power8;  mv ecm ecm_power8

          #echo "ARM64 build"
          #make build_arm64;   mv ecm ecm_arm64

          #echo "Windows build"
          #make build_windows; mv ecm ecm_windows

          echo "AMD64 build"
          make build_amd64;   mv ecm ecm_amd64

          echo "Tar all builds"
          tar cfz ../ecm_app.tar.gz ecm_amd64
          #tar cfz ../ecm_app.tar.gz ecm_amd64 ecm_power8 ecm_arm64 ecm_windows ecm.app

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload cli binaries
        id: upload-ecm-cli
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ecm_cli.tar.gz
          asset_name: ecm_cli.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload app binaries
        id: upload-ecm-app
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ecm_app.tar.gz
          asset_name: ecm_app.tar.gz
          asset_content_type: application/octet-stream

      - name: Set upload_url
        id: upload-url
        run: |
          export UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          echo "::set-output name=upload_url::${UPLOAD_URL}"
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  job-macos:
    name: Build-macos
    runs-on: macos-latest
    needs: [job-linux]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build fyne
        run: |
          echo "build fyne"
          curl -ksLO https://github.com/fyne-io/fyne/archive/refs/tags/v2.2.2.tar.gz
          tar xfz v2.2.2.tar.gz
          cd fyne-2.2.2/cmd/fyne
          pwd
          ls
          go build
          ls
          cp fyne ../../../
          cd -
          pwd
          ls -al $PWD

      - name: Add credentials
        run: |
          pwd
          cd ui
          cat > credentials.env << EOF
          DROPBOX_CLIENT_ID=${{ secrets.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET=${{ secrets.DROPBOX_CLIENT_SECRET }}
          DROPBOX_PORT=${{ secrets.DROPBOX_PORT }}
          EOF
          sed -i -e "s,^[[:space:]]*,,g" credentials.env
          cat > rclone.conf << EOF
          [local]
          type = local
          [dropbox]
          type = dropbox
          env_auth = true
          EOF
          sed -i -e "s,^[[:space:]]*,,g" rclone.conf
          cd -

      - name: Build-UI
        run: |
          pwd
          export PATH=$PATH:$PWD
          cd ui

          echo "Darwin build"
          fyne bundle credentials.env > credentials.go
          fyne package
          tar cfz ../ecm_app_macOS.tar.gz ecm.app

      - name: Upload app binaries
        id: upload-ecm-app
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.job-linux.outputs.upload_url }}
          asset_path: ./ecm_app_macOS.tar.gz
          asset_name: ecm_app_macOS.tar.gz
          asset_content_type: application/octet-stream

  job-windows:
    name: Build-windows
    runs-on: windows-latest
    needs: [job-linux]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build fyne
        run: |
          echo "build fyne"
          curl -ksLO https://github.com/fyne-io/fyne/archive/refs/tags/v2.2.2.tar.gz
          tar xfz v2.2.2.tar.gz
          cd fyne-2.2.2\cmd\fyne
          go build
          copy fyne.exe ..\..\..\
          cd -

      - name: Add credentials
        run: |
          cd ui
          echo "DROPBOX_CLIENT_ID=${{ secrets.DROPBOX_CLIENT_ID }}" > credentials.env
          echo "DROPBOX_CLIENT_SECRET=${{ secrets.DROPBOX_CLIENT_SECRET }}" >> credentials.env
          echo "DROPBOX_PORT=${{ secrets.DROPBOX_PORT }}" >> credentials.env
          echo "[local]" > rclone.conf
          echo "type = local" >> rclone.conf
          echo "[dropbox]" >> rclone.conf
          echo "type = dropbox" >> rclone.conf
          echo "env_auth = true" >> rclone.conf
          cd -

      - name: Build-UI
        run: |
          set PATH="%PATH%;."
          $env:path += ";."
          cd ui
          echo "Windows build"
          fyne.exe bundle credentials.env > credentials.go
          fyne.exe package
          tar cfz ../ecm_app_windows.tar.gz ecm.exe

      - name: Upload app binaries
        id: upload-ecm-app
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.job-linux.outputs.upload_url }}
          asset_path: ./ecm_app_windows.tar.gz
          asset_name: ecm_app_windows.tar.gz
          asset_content_type: application/octet-stream
